# -*- coding: utf-8 -*-
"""Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18vnP87rY2RZCUDfB95qTZgaUHDWYafPm
"""

import numpy as np

def f(x):
    return np.sqrt(np.exp(x[0]) + np.exp(-x[1])) + np.log(np.exp(x[1]) + np.exp(x[2]))

def gradi(x):
    grad = np.zeros_like(x)
    grad[0] = 0.5 * np.exp(x[0]) / np.sqrt(np.exp(x[0]) + np.exp(-x[1]))
    grad[1] = -0.5 * np.exp(-x[1]) / np.sqrt(np.exp(x[0]) + np.exp(-x[1])) + np.exp(x[1]) / (np.exp(x[1]) + np.exp(x[2]))
    grad[2] = np.exp(x[2]) / (np.exp(x[1]) + np.exp(x[2]))
    return grad

def constraint(y):
    return y[0] - 2 * y[1] + 3 * y[2] - 2

def projection(x):
    alpha = 0.1  
    max_iter = 1000  

    y = x.copy()
    for _ in range(max_iter):
        grad = 2 * (y - x) + 2 * constraint(y) * gradient(y)
        y -= alpha * grad
        y = np.maximum(y, 0)  

    return y

def gradient_projection_method(x0, alpha, max_iter):
    x = x0.copy().astype(float)  
    iterates = [x.copy()]
    for _ in range(max_iter):
        grad = gradi(x)
        x -= alpha * grad.astype(float)  
        x = projection(x)
        iterates.append(x.copy())
    return iterates

x0 = np.array([3, 2, 1], dtype=float) 
alpha = 0.1
max_iter = 5


iterates = gradient_projection_method(x0, alpha, max_iter)

for i, x in enumerate(iterates):
    print(f"Iteration Number {i+1}: {x}")

optimized_value = f(iterates[-1])
print(f"f(x*): {optimized_value}")

